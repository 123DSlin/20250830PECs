"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalysisResults = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const TrieTreeVisualizer_1 = require("./TrieTreeVisualizer");
const AnalysisResults = ({ results }) => {
    const [activeTab, setActiveTab] = (0, react_1.useState)('overview');
    const [expandedPECs, setExpandedPECs] = (0, react_1.useState)(new Set());
    const togglePEC = (pecId) => {
        const newExpanded = new Set(expandedPECs);
        if (newExpanded.has(pecId)) {
            newExpanded.delete(pecId);
        }
        else {
            newExpanded.add(pecId);
        }
        setExpandedPECs(newExpanded);
    };
    const getStats = () => {
        const totalPrefixes = results.configObjects.reduce((sum, config) => sum + config.prefixes.length, 0);
        const configuredPECs = results.pecs.filter(p => p.configObjects.length > 0).length;
        const emptyPECs = results.pecs.filter(p => p.configObjects.length === 0).length;
        const coveragePercentage = results.pecs.length > 0 ? (configuredPECs / results.pecs.length) * 100 : 0;
        return {
            totalConfigs: results.configObjects.length,
            totalPrefixes,
            totalPECs: results.pecs.length,
            configuredPECs,
            emptyPECs,
            coveragePercentage: Math.round(coveragePercentage * 100) / 100
        };
    };
    const stats = getStats();
    return ((0, jsx_runtime_1.jsxs)("div", { className: "analysis-results", children: [(0, jsx_runtime_1.jsxs)("div", { className: "results-header", children: [(0, jsx_runtime_1.jsx)("h2", { children: "Analysis Results" }), (0, jsx_runtime_1.jsxs)("div", { className: "stats-grid", children: [(0, jsx_runtime_1.jsxs)("div", { className: "stat-card", children: [(0, jsx_runtime_1.jsx)("div", { className: "stat-value", children: stats.totalConfigs }), (0, jsx_runtime_1.jsx)("div", { className: "stat-label", children: "Config Objects" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "stat-card", children: [(0, jsx_runtime_1.jsx)("div", { className: "stat-value", children: stats.totalPrefixes }), (0, jsx_runtime_1.jsx)("div", { className: "stat-label", children: "Total Prefixes" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "stat-card", children: [(0, jsx_runtime_1.jsx)("div", { className: "stat-value", children: stats.totalPECs }), (0, jsx_runtime_1.jsx)("div", { className: "stat-label", children: "Total PECs" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "stat-card", children: [(0, jsx_runtime_1.jsxs)("div", { className: "stat-value", children: [stats.coveragePercentage, "%"] }), (0, jsx_runtime_1.jsx)("div", { className: "stat-label", children: "Coverage" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "results-tabs", children: [(0, jsx_runtime_1.jsx)("button", { className: `tab-button ${activeTab === 'overview' ? 'active' : ''}`, onClick: () => setActiveTab('overview'), children: "Overview" }), (0, jsx_runtime_1.jsxs)("button", { className: `tab-button ${activeTab === 'pecs' ? 'active' : ''}`, onClick: () => setActiveTab('pecs'), children: ["Packet Equivalence Classes (", stats.totalPECs, ")"] }), (0, jsx_runtime_1.jsxs)("button", { className: `tab-button ${activeTab === 'configs' ? 'active' : ''}`, onClick: () => setActiveTab('configs'), children: ["Configuration Objects (", stats.totalConfigs, ")"] }), (0, jsx_runtime_1.jsx)("button", { className: `tab-button ${activeTab === 'trie' ? 'active' : ''}`, onClick: () => setActiveTab('trie'), children: "Trie Tree Structure" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "tab-content", children: [activeTab === 'overview' && ((0, jsx_runtime_1.jsxs)("div", { className: "overview-tab", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Network Configuration Analysis Summary" }), (0, jsx_runtime_1.jsxs)("div", { className: "summary-grid", children: [(0, jsx_runtime_1.jsxs)("div", { className: "summary-section", children: [(0, jsx_runtime_1.jsx)("h4", { children: "Configuration Objects" }), (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsxs)("li", { children: ["Prefix Lists: ", results.configObjects.filter(c => c.type === 'prefix-list').length] }), (0, jsx_runtime_1.jsxs)("li", { children: ["Route Maps: ", results.configObjects.filter(c => c.type === 'route-map').length] }), (0, jsx_runtime_1.jsxs)("li", { children: ["Interfaces: ", results.configObjects.filter(c => c.type === 'interface').length] }), (0, jsx_runtime_1.jsxs)("li", { children: ["BGP Configs: ", results.configObjects.filter(c => c.type === 'bgp').length] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "summary-section", children: [(0, jsx_runtime_1.jsx)("h4", { children: "Packet Equivalence Classes" }), (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsxs)("li", { children: ["Configured PECs: ", stats.configuredPECs] }), (0, jsx_runtime_1.jsxs)("li", { children: ["Empty PECs: ", stats.emptyPECs] }), (0, jsx_runtime_1.jsxs)("li", { children: ["Coverage: ", stats.coveragePercentage, "%"] })] })] })] })] })), activeTab === 'pecs' && ((0, jsx_runtime_1.jsxs)("div", { className: "pecs-tab", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Packet Equivalence Classes" }), (0, jsx_runtime_1.jsx)("div", { className: "pecs-list", children: results.pecs.map((pec) => ((0, jsx_runtime_1.jsxs)("div", { className: "pec-item", children: [(0, jsx_runtime_1.jsxs)("div", { className: "pec-header", onClick: () => togglePEC(pec.id), children: [(0, jsx_runtime_1.jsx)("span", { className: "pec-id", children: pec.id }), (0, jsx_runtime_1.jsxs)("span", { className: "pec-range", children: [pec.range.start, " - ", pec.range.end] }), (0, jsx_runtime_1.jsxs)("span", { className: "pec-config-count", children: [pec.configObjects.length, " configs"] }), (0, jsx_runtime_1.jsx)("span", { className: "pec-toggle", children: expandedPECs.has(pec.id) ? '▼' : '▶' })] }), expandedPECs.has(pec.id) && ((0, jsx_runtime_1.jsxs)("div", { className: "pec-details", children: [(0, jsx_runtime_1.jsxs)("div", { className: "pec-prefixes", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Contributing Prefixes:" }), (0, jsx_runtime_1.jsx)("ul", { children: pec.contributingPrefixes.map((prefix, idx) => ((0, jsx_runtime_1.jsxs)("li", { children: [prefix.network, "/", prefix.mask, prefix.ge && ` ge ${prefix.ge}`, prefix.le && ` le ${prefix.le}`] }, idx))) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "pec-configs", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Configuration Objects:" }), (0, jsx_runtime_1.jsx)("ul", { children: pec.configObjects.map((config) => ((0, jsx_runtime_1.jsxs)("li", { children: [(0, jsx_runtime_1.jsx)("strong", { children: config.type }), ": ", config.name, (0, jsx_runtime_1.jsx)("br", {}), (0, jsx_runtime_1.jsxs)("small", { children: ["Router: ", config.router] })] }, config.id))) })] })] }))] }, pec.id))) })] })), activeTab === 'configs' && ((0, jsx_runtime_1.jsxs)("div", { className: "configs-tab", children: [(0, jsx_runtime_1.jsx)("h3", { children: "Configuration Objects" }), (0, jsx_runtime_1.jsx)("div", { className: "configs-list", children: results.configObjects.map((config) => ((0, jsx_runtime_1.jsxs)("div", { className: "config-item", children: [(0, jsx_runtime_1.jsxs)("div", { className: "config-header", children: [(0, jsx_runtime_1.jsx)("span", { className: "config-type", children: config.type }), (0, jsx_runtime_1.jsx)("span", { className: "config-name", children: config.name }), (0, jsx_runtime_1.jsx)("span", { className: "config-router", children: config.router })] }), (0, jsx_runtime_1.jsxs)("div", { className: "config-prefixes", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Prefixes:" }), (0, jsx_runtime_1.jsx)("ul", { children: config.prefixes.map((prefix, idx) => ((0, jsx_runtime_1.jsxs)("li", { children: [prefix.network, "/", prefix.mask, prefix.ge && ` ge ${prefix.ge}`, prefix.le && ` le ${prefix.le}`] }, idx))) })] }), config.matchConditions && config.matchConditions.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "config-matches", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Match Conditions:" }), (0, jsx_runtime_1.jsx)("ul", { children: config.matchConditions.map((match, idx) => ((0, jsx_runtime_1.jsxs)("li", { children: [match.type, ": ", match.value, match.prefixList && ` (prefix-list: ${match.prefixList})`] }, idx))) })] })), config.setActions && config.setActions.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "config-actions", children: [(0, jsx_runtime_1.jsx)("strong", { children: "Set Actions:" }), (0, jsx_runtime_1.jsx)("ul", { children: config.setActions.map((action, idx) => ((0, jsx_runtime_1.jsxs)("li", { children: [action.type, ": ", action.value, action.additive && ' (additive)'] }, idx))) })] }))] }, config.id))) })] })), activeTab === 'trie' && ((0, jsx_runtime_1.jsx)("div", { className: "trie-tab", children: (0, jsx_runtime_1.jsx)(TrieTreeVisualizer_1.TrieTreeVisualizer, { trie: results.trie }) }))] })] }));
};
exports.AnalysisResults = AnalysisResults;
